							---Assignment 7---
					 --To solve below queries use “sales” database

--Write a query that lists each order number followed by the name of the customer who made the
--order.
--SELECT o.onum, o.cnum, c.cname FROM orders o INNER JOIN customers c
--ON o.cnum = c.cnum;

--Write a query that gives the names of both the salesperson and the customer for each order along
--with the order number.
--SELECT o.onum, o.cnum, o. snum, c.cname, s.sname  FROM orders o , customers c, salespeople s;

--Write a query that produces all customers serviced by salespeople with a commission above 12%.
--Output the customer’s name, the salesperson’s name, and the salesperson’s rate of commission.
--SELECT c.cname, s.sname, s.comm FROM customers c, salespeople s WHERE
--c.snum = s.snum and s.comm > 0.12;

--Write a query that calculates the amount of the salesperson’s commission on each order by a
--customer with a rating above 100.
--SELECT * FROM salespeople s , customers c
--WHERE s.snum = c.snum and rating > 100;

--Write a query that produces all pairs of salespeople who are living in the same city.Exclude
--combinations of salespeople with themselves as well as duplicate rows with the order reversed
SELECT distinct s1.sname, s1.city, s2.sname FROM salespeople s1, salespeople s2 
WHERE s1.city= s2.city AND s1.sname != s2.sname;

										---Assignment 8---
							--To solve below queries use "sales" database

--Query-1 --Write a query that uses a subquery to obtain all orders for the customer named Cisneros. Assume
--you do not know his customer number (cnum).
--select * from orders o INNER JOIN customers c
--ON o.cnum = c.cnum where cname = 'cisneros';

--Query-2 --Write a query that produces the names and ratings of all customers who have above- average
--orders.
--Select cname,rating from customers
--where cnum IN(SELECT cnum from orders where amt>(select AVG(amt) from orders));

--Query-3 --Write a query that selects the total amount in orders for each salesperson for whom this total is
--greater than the amount of the largest order in the table.
--SELECT sum(amt) FROM orders GROUP BY snum HAVING sum(amt) > (SELECT max(amt) FROM orders);

--Query-4 --Write a query that selects all customers whose ratings are equal to or greater than ANY of Serres.
--SELECT cnum,cname,city,rating,snum FROM customers WHERE rating >=ANY ( SELECT rating FROM customers WHERE snum IN
--( SELECT snum FROM salespeople WHERE sname='serres' ) );

--Query-5 --Write a query using ANY or ALL that will find all salespeople who have no customers located in
----their city.
--SELECT snum FROM salespeople WHERE (snum, city) NOT IN
--(SELECT snum,city FROM customers);

--Query-6 --Write a query that selects all orders for amounts greater than any for the customers in London.
--SELECT * FROM orders WHERE amt> ANY( SELECT amt FROM orders WHERE cnum IN
--( SELECT cnum FROM customers WHERE city='london' ) );

--Query-7 --Extract all the orders of Motika.
--Select Onum from orders where snum = ( select snum from salespeople where sname = 'Motika');

--Query-8 --Find all the order attribute to salespeople servicing customers in London.
--select * from orders o INNER JOIN customers c
--ON o.cnum = c. cnum where c.city = 'London';

--Query-9 Find names and numbers of all salesperson who have more than one customer.
--SELECT snum,sname FROM salespeople a WHERE 1 < (SELECT COUNT(*) 
--FROM customers WHERE snum=a.snum);

--Query-10 Find --salespeople number,name and city who have multiple customers.
--SELECT * FROM salespeople WHERE snum IN (SELECT DISTINCT snum FROM customers a 
--WHERE EXISTS (SELECT * FROM customers b WHERE b.snum=a.snum AND b.cname<>a.cname));

--Query-11 --Select customers who have a greater rating than any other customer in Rome.
--Select a.cname from customers a where city = 'Rome' and
--rating > (select max(rating)from customers where city != 'Rome');

--Query-12 --Select all orders that had amounts that were greater that at least one of the orders from ‘1990-10-
--04’ .
--SELECT onum,amt,odate,cnum,snum FROM orders WHERE amt > ANY (SELECT amt FROM orders WHERE  odate='1990-10-04');

--Query-13 --Find all orders with amounts smaller than any amount for a customer in San Jose. 
--SELECT onum,amt,odate,cnum,snum FROM orders WHERE amt < ANY
--(SELECT amt FROM orders a, customers b WHERE  a.cnum=b.cnum AND b.city='San Jose');

--Query-14 --Select those customers whose rating are higher than every customer in Paris.
--SELECT cnum,cname,city,rating,snum FROM customers WHERE rating > ALL(SELECT rating FROM customers WHERE city='Paris');

											--Assignment - 9---
								--use "sales" database to solve below queries.
--Query-1 --Create an index that will enable a user to pull orders for ‘1990-10-03’ out of the Orders table
--quickly.
--CREATE INDEX d_order ON orders(odate);

--Query-2 --If the Orders table has already been created, how can you force the onum field to be unique
--(assume all current values are unique)?

  --So first off all we have to remove the null constraint and apply a NOT NULL constraint on

  --        the column. To do this execute the following query

  --          ALTER TABLE orders alter column onum int NOT NULL;

  --         After that you can apply a primary key on that same column. To do this execute the following query

  --          ALTER TABLE orders ADD PRIMARY KEY (onum);

--Query 3 - Create an index that would permit salesperson to retrieve his orders.
--CREATE INDEX I_DATE ON orders(odate);

--Query-4 --Let us assume that each salesperson is to have only one customer of a given rating, and that this is
--currently the case. Create an index that enforces it.
 --currently the case. Create an index that enforces it.

 --ALTER TABLE customers alter column rating int NOT NULL;
 --alter table customers ADD PRIMARY KEY (rating);

--Query-5 --Create an index to speed up searching order on a given date by given customer.
--CREATE INDEX ind_odate_cnum ON orders(odate,cnum);